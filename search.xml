<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docker的安装与使用教程（Ubuntu环境）</title>
      <link href="/2023/01/03/Docker%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%EF%BC%88Ubuntu%E7%8E%AF%E5%A2%83%EF%BC%89/"/>
      <url>/2023/01/03/Docker%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%EF%BC%88Ubuntu%E7%8E%AF%E5%A2%83%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="一、安装docker"><a href="#一、安装docker" class="headerlink" title="一、安装docker"></a>一、安装docker</h2><p>安装命令如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure><p>测试docker是否安装成功：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker <span class="built_in">help</span></span><br></pre></td></tr></table></figure><p>若安装成功，终端会显示Usage: docker [OPTIONS] COMMAND，提示你输入更详细的docker命令。</p><h2 id="二、配置镜像加速"><a href="#二、配置镜像加速" class="headerlink" title="二、配置镜像加速"></a>二、配置镜像加速</h2><p>Docker 下载镜像时，如果不配置镜像加速，下载镜像会比较慢，常见的国内镜像加速地址包括：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#腾讯云的镜像地址</span></span><br><span class="line">https://mirror.ccs.tencentyun.com</span><br><span class="line"> </span><br><span class="line"><span class="comment">#网易的镜像地址</span></span><br><span class="line">http://hub-mirror.c<span class="number">.163</span>.com</span><br><span class="line"> </span><br><span class="line"><span class="comment">#阿里云的镜像地址</span></span><br><span class="line">https://&#123;自己的阿里云ID&#125;.mirror.aliyuncs.com</span><br></pre></td></tr></table></figure><p>可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>json文件输入以下内容，表示使用网易的镜像加速地址：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;http://hub-mirror.c.163.com&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置好镜像加速以后，需要重启docker服务：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="三、从docker-hub拉取镜像"><a href="#三、从docker-hub拉取镜像" class="headerlink" title="三、从docker hub拉取镜像"></a>三、从docker hub拉取镜像</h2><p>docker hub类似github，不同的是github可以拉取工程代码、docker hub可以拉取镜像文件。使用之前，docker hub需要先在官网<a href="https://hub.docker.com/">https://hub.docker.com/</a> 注册账号。<br><img src="/images/dockerhub.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜索镜像</span></span><br><span class="line">sudo docker search ubuntu</span><br><span class="line">NAME                             DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">ubuntu                           Ubuntu <span class="keyword">is</span> a Debian-based Linux operating sys…   <span class="number">15413</span>     [OK]       </span><br><span class="line">websphere-liberty                WebSphere Liberty multi-architecture images …   <span class="number">291</span>       [OK]       </span><br><span class="line">ubuntu-upstart                   DEPRECATED, <span class="keyword">as</span> <span class="keyword">is</span> Upstart (find other proces…   <span class="number">112</span>       [OK]       </span><br><span class="line">neurodebian                      NeuroDebian provides neuroscience research s…   <span class="number">97</span>        [OK]       </span><br><span class="line">ubuntu/nginx                     Nginx, a high-performance reverse proxy &amp; we…   <span class="number">73</span>       </span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">sudo docker pull ubuntu            </span><br></pre></td></tr></table></figure><h2 id="四、常用的docker命令"><a href="#四、常用的docker命令" class="headerlink" title="四、常用的docker命令"></a>四、常用的docker命令</h2><p>1、启动新容器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --gpus <span class="built_in">all</span> --shm-size 64G --name new_container -it -v /home/Documents:/usr/Documents yolov5_v1:latest bash</span><br></pre></td></tr></table></figure><p>–gpus all 代表使用本机所有的gpu, –shm-size 64G代表共享存储空间是64G，–name new_container代表本容器名为new_container，-v /home/Documents:/usr/Documents代表将本机的/home/Documents挂载到容器的/usr/Documents，yolov5_v1:latest是镜像名和版本号，可以理解为本容器是以镜像yolov5_v1:latest为基础建立的一个虚拟机。</p><p>2、启动并进入容器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker start container_ID    <span class="comment">#启动容器</span></span><br><span class="line">docker attach container_ID   <span class="comment">#进入容器</span></span><br></pre></td></tr></table></figure><p>3、删除容器、删除镜像</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rm container_id   <span class="comment"># 删除容器</span></span><br><span class="line">docker rmi image_id      <span class="comment"># 删除镜像</span></span><br></pre></td></tr></table></figure><p>4、查看容器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a   <span class="comment"># 查看所有容器</span></span><br><span class="line">docker ps      <span class="comment"># 查看所有正在运行的容器</span></span><br></pre></td></tr></table></figure><p>5、查看所有镜像</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images  <span class="comment"># 查看镜像</span></span><br></pre></td></tr></table></figure><p>6、从容器创建镜像</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker commit e1355f86c678 yolov5_v1:latest</span><br></pre></td></tr></table></figure><p>7、导出镜像和导入镜像</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker save -o yolov5_v1.tar yolov5_v1:latest     <span class="comment"># 导出镜像为tar压缩文件</span></span><br><span class="line">docker load --<span class="built_in">input</span> yolov5_v1.tar                 <span class="comment"># 从tar压缩文件导入镜像</span></span><br></pre></td></tr></table></figure><h2 id="五、常见的问题"><a href="#五、常见的问题" class="headerlink" title="五、常见的问题"></a>五、常见的问题</h2><p>1、E: Unable to locate package sudo 的错误</p><p>解决方法：先运行apt-get update，再运行apt-get install sudo</p><p>2、缺少wget包</p><p>解决方法：sudo apt-get install wget</p><p>3、获取miniconda安装包，安装miniconda</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://repo.anaconda.com/miniconda/Miniconda3-py38_4<span class="number">.12</span><span class="number">.0</span>-Linux-x86_64.sh</span><br><span class="line">bash Miniconda3-py38_4<span class="number">.12</span><span class="number">.0</span>-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><p>4、实时刷新gpu使用情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1秒刷新1次</span></span><br><span class="line">watch -n <span class="number">1</span> nvidia-smi</span><br><span class="line">watch -n <span class="number">1</span> --color gpustat --c</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jetson Xavier NX刷机流程</title>
      <link href="/2022/12/31/Jetson%20Xavier%20NX%E5%88%B7%E6%9C%BA%E6%B5%81%E7%A8%8B/"/>
      <url>/2022/12/31/Jetson%20Xavier%20NX%E5%88%B7%E6%9C%BA%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="一、配备刷机环境"><a href="#一、配备刷机环境" class="headerlink" title="一、配备刷机环境"></a>一、配备刷机环境</h2><p>Jetson刷机需要使用Linux系统，可以是一台安装Linux操作系统的主机，也可以在一台Windows系统主机上安装Linux虚拟机。我选择的是安装VMWare WorkStation，在VM虚拟机中安装ubuntu系统。<br><img src="/images/VMware.png"></p><h2 id="二、Linux系统安装SDKManager"><a href="#二、Linux系统安装SDKManager" class="headerlink" title="二、Linux系统安装SDKManager"></a>二、Linux系统安装SDKManager</h2><p>Jetson刷机需要用到Nvidia的专用刷机软件SDKManger，到官网<a href="https://docs.nvidia.com/sdk-manager/">https://docs.nvidia.com/sdk-manager/</a> 下载(下载前需注册Nvidia的账号）。<br><img src="/images/sdk.png"></p><h2 id="三、Jetson烧录操作系统"><a href="#三、Jetson烧录操作系统" class="headerlink" title="三、Jetson烧录操作系统"></a>三、Jetson烧录操作系统</h2><p>找到Jetson NX风扇下方的一排引脚，将第二个和第三个引脚（即GND和FC REC）用杜邦线短接，用USB线连接NX板和Linux电脑，给NX板接上电源。此时，Jetson NX进入烧录模式。</p><p>Step01：查看Target Hardware中Jetson NX是否连接好，按需选择JetPack版本和DeepStream版本，点击continue开始烧录。（Host Machine不用勾选，此项表示在linux主机上安装选中的包）<br><img src="/images/step_1.png"></p><p>Step02：选择Jetson OS，勾选接受协议，点击continue继续。（Jetson OS是开发板系统，Jetson SDK Components是cuda等组件，考虑到Jetson NX自带的存储空间是8G，暂时只烧录开发板系统，组件将烧录到SSD固态硬盘上）<br><img src="/images/step_2.png"></p><p>Step03：选择Manual Setup，OEM Configuration选择Runtime，点击Flash，后面只需要等待系统烧录完成，烧录过程比较漫长。<br><img src="/images/step_3.png"></p><p>Step04：待系统烧录完成后，立即拔掉Jetson NX的电源线、拔掉USB线、拔掉第二引脚和第三引脚上的杜邦线。给Jetson NX重新接上电源线，接上显示器连接线，接上网线，接上键鼠无线接收器，在Jetson开机过程中，给Jetson系统设置时区、用户名、密码等必要的信息。如果Jetson能正常进入Ubuntu系统，桌面能看到L4T-README文件夹，表示系统烧录成功。</p><h2 id="四、设置CSI相机的引脚"><a href="#四、设置CSI相机的引脚" class="headerlink" title="四、设置CSI相机的引脚"></a>四、设置CSI相机的引脚</h2><p>Jetson NX自带两个CSI相机排线接口，就在电源孔后方，使用之前需要配置引脚。在Jetson NX上打开终端，运行 sudo /opt/nvidia/jetson-io/jetson-io.py，在弹出的界面上依次选择Configure Jetson Nano CSI Connector、Configure for compatible hardware、Camera XXX(选择自己的相机型号)、Save pin changes、Save and exit without rebooting。</p><p>此时，先关机，将CSI相机通过排线连到Jetson NX板上。开机后，在终端输入nvgstcapture，验证相机是否能取图。如果屏幕上出现相机实时图像，表示相机已成功连接。<br><img src="/images/step_5.png"></p><h2 id="五、设置从SSD固态硬盘启动系统"><a href="#五、设置从SSD固态硬盘启动系统" class="headerlink" title="五、设置从SSD固态硬盘启动系统"></a>五、设置从SSD固态硬盘启动系统</h2><p>因为Jetson NX本身存储空间有限，可以给开发板另外再装一个固态硬盘，开发板自带NvmeM.2接口。在Jetson NX关机状态下，装上SSD固态硬盘，开机。打开磁盘管理工具Disks,将磁盘工具格式化，并创建ext4分区。<br><img src="/images/step_6.png"></p><p>利用命令行git clone <a href="https://github.com/jetsonhacks/rootOnNVMe.git">https://github.com/jetsonhacks/rootOnNVMe.git</a> 下载rootOnNVMe工具包。</p><p>进入rootOnNVMe文件夹，运行sh copy-rootfs-ssd.sh将系统文件复制到固态硬盘，再运行 sh setup-service.sh设置系统从SSD启动。</p><p>重启Jetson NX，查看Disks，如果Flilesystem Root是挂载在SSD固态硬盘上，表示系统已经是在SSD上启动。</p><h2 id="六、安装Jetson-SDK-Components"><a href="#六、安装Jetson-SDK-Components" class="headerlink" title="六、安装Jetson SDK Components"></a>六、安装Jetson SDK Components</h2><p>在Jetson NX终端输入ifconfig，查看板子的ip地址。</p><p>在Linux主机上再次打开SDK Manager，重复step01-step04，setp03勾选etson SDK Components（不要勾选Jetson OS），step04中connection选择Ethernet,填入Jetson NX的ip地址，用户名和密码，点击install，耐心等待cuda等组件安装完成。<br><img src="/images/step_7.png"><br><img src="/images/step_8.png"></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jetson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YOLOV5实例分割：用TensorRT模型做推理加速</title>
      <link href="/2022/12/16/YOLOV5%E5%AE%9E%E4%BE%8B%E5%88%86%E5%89%B2%EF%BC%9A%E7%94%A8TensorRT%E6%A8%A1%E5%9E%8B%E5%81%9A%E6%8E%A8%E7%90%86%E5%8A%A0%E9%80%9F/"/>
      <url>/2022/12/16/YOLOV5%E5%AE%9E%E4%BE%8B%E5%88%86%E5%89%B2%EF%BC%9A%E7%94%A8TensorRT%E6%A8%A1%E5%9E%8B%E5%81%9A%E6%8E%A8%E7%90%86%E5%8A%A0%E9%80%9F/</url>
      
        <content type="html"><![CDATA[<p>yolov5官方工程的export.py支持将pytorch模型转换成engine模型，同时segment文件夹下的predict.py也支持TensorRT推理加速。本文是对官方工程的TensorRT推理过程做了提炼，可视化阶段要用到yolov5工程中的utils文件夹，建议在官方工程中测试使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yolov5的tensorrt推理</span></span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">import</span> pycuda.autoinit</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pycuda.driver <span class="keyword">as</span> cuda</span><br><span class="line"><span class="keyword">import</span> tensorrt <span class="keyword">as</span> trt</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> utils.general <span class="keyword">import</span> non_max_suppression, scale_boxes</span><br><span class="line"><span class="keyword">from</span> utils.segment.general <span class="keyword">import</span> process_mask, scale_image</span><br><span class="line"><span class="keyword">from</span> utils.plots <span class="keyword">import</span> colors</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据转换</span></span><br><span class="line">data_transform = transforms.Compose([</span><br><span class="line">    transforms.Resize([<span class="number">384</span>, <span class="number">640</span>]),</span><br><span class="line">    transforms.ToTensor()</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_img_np_nchw</span>(<span class="params">filename</span>):</span></span><br><span class="line">    img = Image.<span class="built_in">open</span>(filename)</span><br><span class="line">    <span class="keyword">if</span> img.mode != <span class="string">&#x27;RGB&#x27;</span>:</span><br><span class="line">        img = img.convert(<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line">    img = data_transform(img)</span><br><span class="line">    img = np.expand_dims(img, <span class="number">0</span>).astype(np.float32)</span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Simple helper data class that&#x27;s a little nicer to use than a 2-tuple.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HostDeviceMem</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, host_mem, device_mem</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Within this context, host_mom means the cpu memory and device means the GPU memory</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.host = host_mem</span><br><span class="line">        self.device = device_mem</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Host:\n&quot;</span> + <span class="built_in">str</span>(self.host) + <span class="string">&quot;\nDevice:\n&quot;</span> + <span class="built_in">str</span>(self.device)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__str__()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Allocates all buffers required for an engine, i.e. host/device inputs/outputs.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allocate_buffers</span>(<span class="params">engine, img_np_nchw</span>):</span></span><br><span class="line">    inputs = []</span><br><span class="line">    outputs = []</span><br><span class="line">    bindings = []</span><br><span class="line">    stream = cuda.Stream()</span><br><span class="line">    <span class="keyword">for</span> binding <span class="keyword">in</span> engine:</span><br><span class="line">        binding_shape = engine.get_binding_shape(binding)</span><br><span class="line">        <span class="keyword">if</span> binding_shape[-<span class="number">1</span>] == -<span class="number">1</span>:</span><br><span class="line">            binding_shape[-<span class="number">2</span>], binding_shape[-<span class="number">1</span>] = img_np_nchw.shape[<span class="number">2</span>:]</span><br><span class="line">        size = trt.volume(binding_shape) * engine.max_batch_size</span><br><span class="line">        dtype = trt.nptype(engine.get_binding_dtype(binding))</span><br><span class="line">        <span class="comment"># Allocate host and device buffers</span></span><br><span class="line">        host_mem = cuda.pagelocked_empty(size, dtype)</span><br><span class="line">        device_mem = cuda.mem_alloc(host_mem.nbytes)</span><br><span class="line">        <span class="comment"># Append the device buffer to device bindings.</span></span><br><span class="line">        bindings.append(<span class="built_in">int</span>(device_mem))</span><br><span class="line">        <span class="comment"># Append to the appropriate list.</span></span><br><span class="line">        <span class="keyword">if</span> engine.binding_is_input(binding):</span><br><span class="line">            inputs.append(HostDeviceMem(host_mem, device_mem))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            outputs.append(HostDeviceMem(host_mem, device_mem))</span><br><span class="line">    <span class="keyword">return</span> inputs, outputs, bindings, stream</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># This function is generalized for multiple inputs/outputs.</span></span><br><span class="line"><span class="comment"># inputs and outputs are expected to be lists of HostDeviceMem objects.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_inference</span>(<span class="params">context, bindings, inputs, outputs, stream, batch_size=<span class="number">1</span></span>):</span></span><br><span class="line">    <span class="comment"># Transfer data from CPU to the GPU.</span></span><br><span class="line">    [cuda.memcpy_htod_async(inp.device, inp.host, stream) <span class="keyword">for</span> inp <span class="keyword">in</span> inputs]</span><br><span class="line">    <span class="comment"># Run inference.</span></span><br><span class="line">    context.execute_async(batch_size=batch_size, bindings=bindings, stream_handle=stream.handle)</span><br><span class="line">    <span class="comment"># Transfer predictions back from the GPU.</span></span><br><span class="line">    [cuda.memcpy_dtoh_async(out.host, out.device, stream) <span class="keyword">for</span> out <span class="keyword">in</span> outputs]</span><br><span class="line">    <span class="comment"># Synchronize the stream</span></span><br><span class="line">    stream.synchronize()</span><br><span class="line">    <span class="comment"># Return only the host outputs.</span></span><br><span class="line">    <span class="keyword">return</span> [out.host <span class="keyword">for</span> out <span class="keyword">in</span> outputs]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">postprocess_the_outputs</span>(<span class="params">trt_outputs</span>):</span></span><br><span class="line">    pred = trt_outputs[<span class="number">1</span>].reshape(<span class="number">1</span>, <span class="number">15120</span>, <span class="number">117</span>)</span><br><span class="line">    proto = trt_outputs[<span class="number">0</span>].reshape(<span class="number">1</span>, <span class="number">32</span>, <span class="number">96</span>, <span class="number">160</span>)</span><br><span class="line">    <span class="keyword">return</span> pred, proto</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;./data/images/zidane.jpg&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 图像预处理</span></span><br><span class="line">img_np_nchw = get_img_np_nchw(filename)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;preprocess:&#x27;</span>, img_np_nchw.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载engine</span></span><br><span class="line">ENGINE_PATH = <span class="string">&#x27;D:/PycharmProjects/yolov5-7.0/yolov5s-seg.engine&#x27;</span></span><br><span class="line">trt_logger = trt.Logger(trt.Logger.INFO)</span><br><span class="line">runtime = trt.Runtime(trt_logger)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(ENGINE_PATH, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    engine = runtime.deserialize_cuda_engine(f.read())</span><br><span class="line"><span class="comment"># 分配内存</span></span><br><span class="line">inputs, outputs, bindings, stream = allocate_buffers(engine, img_np_nchw)  <span class="comment"># input, output: host # bindings</span></span><br><span class="line">inputs[<span class="number">0</span>].host = img_np_nchw.reshape(-<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 引擎定义输入尺寸</span></span><br><span class="line">context = engine.create_execution_context()</span><br><span class="line"><span class="keyword">if</span> context.get_binding_shape(<span class="number">0</span>)[-<span class="number">1</span>] == -<span class="number">1</span>:</span><br><span class="line">    context.set_binding_shape(<span class="number">0</span>, img_np_nchw.shape)</span><br><span class="line">trt_outputs = do_inference(context, bindings=bindings, inputs=inputs, outputs=outputs, stream=stream)  <span class="comment"># numpy data</span></span><br><span class="line">pred, proto = postprocess_the_outputs(trt_outputs)</span><br><span class="line"></span><br><span class="line">pred = torch.from_numpy(pred).to(<span class="string">&quot;cuda:0&quot;</span>)</span><br><span class="line">proto = torch.from_numpy(proto).to(<span class="string">&quot;cuda:0&quot;</span>)</span><br><span class="line"><span class="comment"># NMS</span></span><br><span class="line">pred = non_max_suppression(pred, conf_thres=<span class="number">0.55</span>, iou_thres=<span class="number">0.45</span>, max_det=<span class="number">1000</span>, nm=<span class="number">32</span>)</span><br><span class="line"><span class="comment"># 画图</span></span><br><span class="line">det = pred[<span class="number">0</span>]</span><br><span class="line">masks = process_mask(proto[<span class="number">0</span>], det[:, <span class="number">6</span>:], det[:, :<span class="number">4</span>], img_np_nchw.shape[<span class="number">2</span>:], upsample=<span class="literal">True</span>)  <span class="comment"># HWC</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 画mask</span></span><br><span class="line">ori_img = cv2.imread(filename)</span><br><span class="line">img = torch.from_numpy(img_np_nchw).to(<span class="string">&quot;cuda:0&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(masks) == <span class="number">0</span>:</span><br><span class="line">    dst_img = img[<span class="number">0</span>].permute(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>).contiguous().cpu().numpy() * <span class="number">255</span></span><br><span class="line">colors = [colors(x, <span class="literal">True</span>) <span class="keyword">for</span> x <span class="keyword">in</span> det[:, <span class="number">5</span>]]</span><br><span class="line">colors = torch.tensor(colors, device=<span class="string">&quot;cuda:0&quot;</span>, dtype=torch.float32) / <span class="number">255.0</span></span><br><span class="line">colors = colors[:, <span class="literal">None</span>, <span class="literal">None</span>]  <span class="comment"># shape(n,1,1,3)</span></span><br><span class="line">masks = masks.unsqueeze(<span class="number">3</span>)  <span class="comment"># shape(n,h,w,1)</span></span><br><span class="line">masks_color = masks * (colors * <span class="number">0.5</span>)  <span class="comment"># shape(n,h,w,3)</span></span><br><span class="line"></span><br><span class="line">inv_alph_masks = (<span class="number">1</span> - masks * <span class="number">0.5</span>).cumprod(<span class="number">0</span>)  <span class="comment"># shape(n,h,w,1)</span></span><br><span class="line">mcs = (masks_color * inv_alph_masks).<span class="built_in">sum</span>(<span class="number">0</span>) * <span class="number">2</span>  <span class="comment"># mask color summand shape(n,h,w,3)</span></span><br><span class="line">dst_img = img[<span class="number">0</span>].flip(dims=[<span class="number">0</span>])  <span class="comment"># flip channel</span></span><br><span class="line">dst_img = dst_img.permute(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>).contiguous()  <span class="comment"># shape(h,w,3)</span></span><br><span class="line">dst_img = dst_img * inv_alph_masks[-<span class="number">1</span>] + mcs</span><br><span class="line">im_mask = (dst_img * <span class="number">255</span>).byte().cpu().numpy()</span><br><span class="line">dst_img = scale_image(dst_img.shape, im_mask, ori_img.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画box label score</span></span><br><span class="line">det[:, :<span class="number">4</span>] = scale_boxes(img.shape[<span class="number">2</span>:], det[:, :<span class="number">4</span>], ori_img.shape).<span class="built_in">round</span>()  <span class="comment"># rescale boxes to ori_img size</span></span><br><span class="line">det_cpu = pred[<span class="number">0</span>].cpu().numpy()</span><br><span class="line"><span class="keyword">for</span> i, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(det_cpu):</span><br><span class="line">    <span class="comment"># 画box</span></span><br><span class="line">    box_int = item[<span class="number">0</span>:<span class="number">4</span>].astype(np.int32)</span><br><span class="line">    cv2.rectangle(dst_img, (box_int[<span class="number">0</span>], box_int[<span class="number">1</span>]), (box_int[<span class="number">2</span>], box_int[<span class="number">3</span>]), color=(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), thickness=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 画label</span></span><br><span class="line">    label = item[<span class="number">5</span>]</span><br><span class="line">    score = item[<span class="number">4</span>]</span><br><span class="line">    org = (<span class="built_in">min</span>(box_int[<span class="number">0</span>], box_int[<span class="number">2</span>]), <span class="built_in">min</span>(box_int[<span class="number">1</span>], box_int[<span class="number">3</span>]) - <span class="number">8</span>)</span><br><span class="line">    text = <span class="string">&#x27;&#123;&#125;--&#123;:.2f&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">int</span>(label), score)</span><br><span class="line">    cv2.putText(dst_img, text, org=org, fontFace=cv2.FONT_HERSHEY_SIMPLEX, fontScale=<span class="number">0.5</span>, color=(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>),</span><br><span class="line">                thickness=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&#x27;result&#x27;</span>, dst_img)</span><br><span class="line">cv2.waitKey()</span><br><span class="line">cv2.imwrite(<span class="string">&#x27;out2.jpg&#x27;</span>, dst_img)</span><br></pre></td></tr></table></figure><p>推理结果图：<br><img src="/images/yolo_out.png"><br>代码运行环境：</p><p>TensorRT版本’8.2.3’</p><p>torch版本’1.8.1+cu111’</p><p>trt模型输入尺寸（384, 640）</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> YOLO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YOLOV5-7.0实例分割onnx模型推理简化流程</title>
      <link href="/2022/12/15/YOLOV5-7.0%E5%AE%9E%E4%BE%8B%E5%88%86%E5%89%B2onnx%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E7%AE%80%E5%8C%96%E6%B5%81%E7%A8%8B/"/>
      <url>/2022/12/15/YOLOV5-7.0%E5%AE%9E%E4%BE%8B%E5%88%86%E5%89%B2onnx%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E7%AE%80%E5%8C%96%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>yolov5官方工程包含训练、推理、部署等众多代码，本文针对onnx模型的推理代码做了简化。代码需要依赖官方工程的utils包（即utils文件夹），建议在官方工程里测试使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yolov5-7.0 onnx模型推理简化流程</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"><span class="keyword">import</span> onnxruntime <span class="keyword">as</span> ort</span><br><span class="line"><span class="keyword">from</span> utils.general <span class="keyword">import</span> non_max_suppression, scale_boxes</span><br><span class="line"><span class="keyword">from</span> utils.augmentations <span class="keyword">import</span> letterbox</span><br><span class="line"><span class="keyword">from</span> utils.segment.general <span class="keyword">import</span> masks2segments, process_mask, scale_image</span><br><span class="line"><span class="keyword">from</span> utils.plots <span class="keyword">import</span> colors</span><br><span class="line"></span><br><span class="line">model_path = <span class="string">&quot;D:/PycharmProjects/yolov5-7.0/yolov5s-seg.onnx&quot;</span></span><br><span class="line">img_path = <span class="string">&quot;./data/images/zidane.jpg&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据预处理</span></span><br><span class="line">img = cv2.imread(img_path)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ori_img:&#x27;</span>, img.shape)</span><br><span class="line">ori_img = deepcopy(img)</span><br><span class="line">img = letterbox(img, new_shape=(<span class="number">640</span>, <span class="number">640</span>), stride=<span class="number">32</span>, auto=<span class="literal">True</span>)[<span class="number">0</span>]  <span class="comment"># padded resize</span></span><br><span class="line">img = np.ascontiguousarray(img.transpose((<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>))[::-<span class="number">1</span>])  <span class="comment"># HWC to CHW, BGR to RGB,contiguous</span></span><br><span class="line"><span class="comment"># img = torch.from_numpy(img).to(&quot;cuda:0&quot;)  # ndarray to tensor</span></span><br><span class="line"><span class="comment"># img = img.float()  # uint8 to fp32</span></span><br><span class="line">img = img.astype(np.float32)</span><br><span class="line">img = img / <span class="number">255</span>  <span class="comment"># 0 - 255 to 0.0 - 1.0</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(img.shape) == <span class="number">3</span>:</span><br><span class="line">    img = img[<span class="literal">None</span>]  <span class="comment"># expand for batch dim</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载模型</span></span><br><span class="line">sess = ort.InferenceSession(model_path, providers=[<span class="string">&#x27;CUDAExecutionProvider&#x27;</span>])  <span class="comment"># &#x27;CPUExecutionProvider&#x27;</span></span><br><span class="line">input_name = sess.get_inputs()[<span class="number">0</span>].name</span><br><span class="line">output_name = [output.name <span class="keyword">for</span> output <span class="keyword">in</span> sess.get_outputs()]</span><br><span class="line"><span class="comment"># 推理</span></span><br><span class="line">outputs = sess.run(output_name, &#123;input_name: img&#125;)</span><br><span class="line"></span><br><span class="line">pred, proto = outputs[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">pred = torch.from_numpy(pred).to(<span class="string">&quot;cuda:0&quot;</span>)</span><br><span class="line">proto = torch.from_numpy(proto).to(<span class="string">&quot;cuda:0&quot;</span>)</span><br><span class="line"><span class="comment"># NMS</span></span><br><span class="line">pred = non_max_suppression(pred, conf_thres=<span class="number">0.25</span>, iou_thres=<span class="number">0.45</span>, max_det=<span class="number">1000</span>, nm=<span class="number">32</span>)</span><br><span class="line"><span class="comment"># 画图</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;resize_img:&#x27;</span>, img.shape)</span><br><span class="line">det = pred[<span class="number">0</span>]</span><br><span class="line">masks = process_mask(proto[<span class="number">0</span>], det[:, <span class="number">6</span>:], det[:, :<span class="number">4</span>], img.shape[<span class="number">2</span>:], upsample=<span class="literal">True</span>)  <span class="comment"># HWC</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 画mask</span></span><br><span class="line">img = torch.from_numpy(img).to(<span class="string">&quot;cuda:0&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(masks) == <span class="number">0</span>:</span><br><span class="line">    dst_img = img[<span class="number">0</span>].permute(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>).contiguous().cpu().numpy() * <span class="number">255</span></span><br><span class="line">colors = [colors(x, <span class="literal">True</span>) <span class="keyword">for</span> x <span class="keyword">in</span> det[:, <span class="number">5</span>]]</span><br><span class="line">colors = torch.tensor(colors, device=<span class="string">&quot;cuda:0&quot;</span>, dtype=torch.float32) / <span class="number">255.0</span></span><br><span class="line">colors = colors[:, <span class="literal">None</span>, <span class="literal">None</span>]  <span class="comment"># shape(n,1,1,3)</span></span><br><span class="line">masks = masks.unsqueeze(<span class="number">3</span>)  <span class="comment"># shape(n,h,w,1)</span></span><br><span class="line">masks_color = masks * (colors * <span class="number">0.5</span>)  <span class="comment"># shape(n,h,w,3)</span></span><br><span class="line"></span><br><span class="line">inv_alph_masks = (<span class="number">1</span> - masks * <span class="number">0.5</span>).cumprod(<span class="number">0</span>)  <span class="comment"># shape(n,h,w,1)</span></span><br><span class="line">mcs = (masks_color * inv_alph_masks).<span class="built_in">sum</span>(<span class="number">0</span>) * <span class="number">2</span>  <span class="comment"># mask color summand shape(n,h,w,3)</span></span><br><span class="line">dst_img = img[<span class="number">0</span>].flip(dims=[<span class="number">0</span>])  <span class="comment"># flip channel</span></span><br><span class="line">dst_img = dst_img.permute(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>).contiguous()  <span class="comment"># shape(h,w,3)</span></span><br><span class="line">dst_img = dst_img * inv_alph_masks[-<span class="number">1</span>] + mcs</span><br><span class="line">im_mask = (dst_img * <span class="number">255</span>).byte().cpu().numpy()</span><br><span class="line">dst_img = scale_image(dst_img.shape, im_mask, ori_img.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画box label score</span></span><br><span class="line">det[:, :<span class="number">4</span>] = scale_boxes(img.shape[<span class="number">2</span>:], det[:, :<span class="number">4</span>], ori_img.shape).<span class="built_in">round</span>()  <span class="comment"># rescale boxes to ori_img size</span></span><br><span class="line">det_cpu = pred[<span class="number">0</span>].cpu().numpy()</span><br><span class="line"><span class="keyword">for</span> i, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(det_cpu):</span><br><span class="line">    <span class="comment"># 画box</span></span><br><span class="line">    box_int = item[<span class="number">0</span>:<span class="number">4</span>].astype(np.int32)</span><br><span class="line">    cv2.rectangle(dst_img, (box_int[<span class="number">0</span>], box_int[<span class="number">1</span>]), (box_int[<span class="number">2</span>], box_int[<span class="number">3</span>]), color=(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), thickness=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 画label</span></span><br><span class="line">    label = item[<span class="number">5</span>]</span><br><span class="line">    score = item[<span class="number">4</span>]</span><br><span class="line">    org = (<span class="built_in">min</span>(box_int[<span class="number">0</span>], box_int[<span class="number">2</span>]), <span class="built_in">min</span>(box_int[<span class="number">1</span>], box_int[<span class="number">3</span>]) - <span class="number">8</span>)</span><br><span class="line">    text = <span class="string">&#x27;&#123;&#125;|&#123;:.2f&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">int</span>(label), score)</span><br><span class="line">    cv2.putText(dst_img, text, org=org, fontFace=cv2.FONT_HERSHEY_SIMPLEX, fontScale=<span class="number">0.5</span>, color=(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>),</span><br><span class="line">                thickness=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&#x27;result&#x27;</span>, dst_img)</span><br><span class="line">cv2.waitKey()</span><br><span class="line">cv2.imwrite(<span class="string">&#x27;out.jpg&#x27;</span>, dst_img)</span><br></pre></td></tr></table></figure><p>推理结果图如下：</p><p><img src="/images/yolo_out.png"></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> YOLO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YOLOV5-7.0实例分割pt模型推理简化流程</title>
      <link href="/2022/12/14/YOLOV5-7.0%E5%AE%9E%E4%BE%8B%E5%88%86%E5%89%B2pt%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E7%AE%80%E5%8C%96%E6%B5%81%E7%A8%8B/"/>
      <url>/2022/12/14/YOLOV5-7.0%E5%AE%9E%E4%BE%8B%E5%88%86%E5%89%B2pt%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E7%AE%80%E5%8C%96%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>yolov5官方工程包含训练、推理、部署等众多代码，本文针对pt模型的推理代码做了简化。代码需要依赖官方工程的utils包（即utils文件夹），建议在官方工程里测试使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yolov5-7.0 pt模型推理简化流程</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"><span class="keyword">from</span> utils.general <span class="keyword">import</span> non_max_suppression, scale_boxes</span><br><span class="line"><span class="keyword">from</span> utils.augmentations <span class="keyword">import</span> letterbox</span><br><span class="line"><span class="keyword">from</span> utils.segment.general <span class="keyword">import</span> process_mask, scale_image</span><br><span class="line"><span class="keyword">from</span> utils.plots <span class="keyword">import</span> colors</span><br><span class="line"></span><br><span class="line">model_path = <span class="string">&quot;D:/PycharmProjects/yolov5-7.0/yolov5s-seg.pt&quot;</span></span><br><span class="line">img_path = <span class="string">&quot;./data/images/zidane.jpg&quot;</span></span><br><span class="line"><span class="comment"># 加载模型</span></span><br><span class="line">model = torch.load(model_path, map_location=<span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line">model = (model.get(<span class="string">&#x27;ema&#x27;</span>) <span class="keyword">or</span> model[<span class="string">&#x27;model&#x27;</span>]).to(<span class="string">&quot;cuda:0&quot;</span>).<span class="built_in">float</span>()  <span class="comment"># FP32 model</span></span><br><span class="line">model.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据预处理</span></span><br><span class="line">img = cv2.imread(img_path)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ori_img:&#x27;</span>, img.shape)</span><br><span class="line">ori_img = deepcopy(img)</span><br><span class="line">img = letterbox(img, new_shape=(<span class="number">640</span>, <span class="number">640</span>), stride=<span class="number">32</span>, auto=<span class="literal">True</span>)[<span class="number">0</span>]  <span class="comment"># padded resize</span></span><br><span class="line">img = np.ascontiguousarray(img.transpose((<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>))[::-<span class="number">1</span>])  <span class="comment"># HWC to CHW, BGR to RGB,contiguous</span></span><br><span class="line">img = torch.from_numpy(img).to(<span class="string">&quot;cuda:0&quot;</span>)  <span class="comment"># ndarray to tensor</span></span><br><span class="line">img = img.<span class="built_in">float</span>()  <span class="comment"># uint8 to fp32</span></span><br><span class="line">img = img / <span class="number">255</span>  <span class="comment"># 0 - 255 to 0.0 - 1.0</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(img.shape) == <span class="number">3</span>:</span><br><span class="line">    img = img[<span class="literal">None</span>]  <span class="comment"># expand for batch dim</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推理</span></span><br><span class="line">result = model(img, augment=<span class="literal">False</span>)</span><br><span class="line">pred, proto = result[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line"><span class="comment"># NMS</span></span><br><span class="line">pred = non_max_suppression(pred, conf_thres=<span class="number">0.25</span>, iou_thres=<span class="number">0.45</span>, max_det=<span class="number">1000</span>, nm=<span class="number">32</span>)</span><br><span class="line"><span class="comment"># 画图</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;resize_img:&#x27;</span>, img.shape)</span><br><span class="line">det = pred[<span class="number">0</span>]</span><br><span class="line">masks = process_mask(proto[<span class="number">0</span>], det[:, <span class="number">6</span>:], det[:, :<span class="number">4</span>], img.shape[<span class="number">2</span>:], upsample=<span class="literal">True</span>)  <span class="comment"># HWC</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 画mask</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(masks) == <span class="number">0</span>:</span><br><span class="line">    dst_img = img[<span class="number">0</span>].permute(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>).contiguous().cpu().numpy() * <span class="number">255</span></span><br><span class="line">colors = [colors(x, <span class="literal">True</span>) <span class="keyword">for</span> x <span class="keyword">in</span> det[:, <span class="number">5</span>]]</span><br><span class="line">colors = torch.tensor(colors, device=<span class="string">&quot;cuda:0&quot;</span>, dtype=torch.float32) / <span class="number">255.0</span></span><br><span class="line">colors = colors[:, <span class="literal">None</span>, <span class="literal">None</span>]  <span class="comment"># shape(n,1,1,3)</span></span><br><span class="line">masks = masks.unsqueeze(<span class="number">3</span>)  <span class="comment"># shape(n,h,w,1)</span></span><br><span class="line">masks_color = masks * (colors * <span class="number">0.5</span>)  <span class="comment"># shape(n,h,w,3)</span></span><br><span class="line"></span><br><span class="line">inv_alph_masks = (<span class="number">1</span> - masks * <span class="number">0.5</span>).cumprod(<span class="number">0</span>)  <span class="comment"># shape(n,h,w,1)</span></span><br><span class="line">mcs = (masks_color * inv_alph_masks).<span class="built_in">sum</span>(<span class="number">0</span>) * <span class="number">2</span>  <span class="comment"># mask color summand shape(n,h,w,3)</span></span><br><span class="line">dst_img = img[<span class="number">0</span>].flip(dims=[<span class="number">0</span>])  <span class="comment"># flip channel</span></span><br><span class="line">dst_img = dst_img.permute(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>).contiguous()  <span class="comment"># shape(h,w,3)</span></span><br><span class="line">dst_img = dst_img * inv_alph_masks[-<span class="number">1</span>] + mcs</span><br><span class="line">im_mask = (dst_img * <span class="number">255</span>).byte().cpu().numpy()</span><br><span class="line">dst_img = scale_image(dst_img.shape, im_mask, ori_img.shape)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 画box label score</span></span><br><span class="line">det[:, :<span class="number">4</span>] = scale_boxes(img.shape[<span class="number">2</span>:], det[:, :<span class="number">4</span>], ori_img.shape).<span class="built_in">round</span>()  <span class="comment"># rescale boxes to ori_img size</span></span><br><span class="line">det_cpu = pred[<span class="number">0</span>].cpu().numpy()</span><br><span class="line"><span class="keyword">for</span> i, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(det_cpu):</span><br><span class="line">    <span class="comment"># 画box</span></span><br><span class="line">    box_int = item[<span class="number">0</span>:<span class="number">4</span>].astype(np.int32)</span><br><span class="line">    cv2.rectangle(dst_img, (box_int[<span class="number">0</span>], box_int[<span class="number">1</span>]), (box_int[<span class="number">2</span>], box_int[<span class="number">3</span>]), color=(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), thickness=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 画label</span></span><br><span class="line">    label = item[<span class="number">5</span>]</span><br><span class="line">    score = item[<span class="number">4</span>]</span><br><span class="line">    org = (<span class="built_in">min</span>(box_int[<span class="number">0</span>], box_int[<span class="number">2</span>]), <span class="built_in">min</span>(box_int[<span class="number">1</span>], box_int[<span class="number">3</span>]) - <span class="number">8</span>)</span><br><span class="line">    text = <span class="string">&#x27;&#123;&#125;--&#123;:.2f&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">int</span>(label), score)</span><br><span class="line">    cv2.putText(dst_img, text, org=org, fontFace=cv2.FONT_HERSHEY_SIMPLEX, fontScale=<span class="number">0.5</span>, color=(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>),</span><br><span class="line">                thickness=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&#x27;result&#x27;</span>, dst_img)</span><br><span class="line">cv2.waitKey()</span><br><span class="line">cv2.imwrite(<span class="string">&#x27;out.jpg&#x27;</span>, dst_img)</span><br></pre></td></tr></table></figure><p>推理结果图如下：</p><p><img src="/images/yolo_out.png"></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> YOLO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何修改onnx模型的batchsize和分类标签？</title>
      <link href="/2022/12/13/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9onnx%E6%A8%A1%E5%9E%8B%E7%9A%84batchsize%E5%92%8C%E5%88%86%E7%B1%BB%E6%A0%87%E7%AD%BE/"/>
      <url>/2022/12/13/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9onnx%E6%A8%A1%E5%9E%8B%E7%9A%84batchsize%E5%92%8C%E5%88%86%E7%B1%BB%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<p>有时候，我们用netron查看一个onnx模，发现其batchsize=1、输入数据的尺寸固定。这种情况下，onnx模型无法进行多图同时推理、也无法兼容动态输入数据。这时，我们可以通过简单的代码改写onnx模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># onnx_to_n_batchsize</span></span><br><span class="line"><span class="keyword">import</span> onnx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_input_dim</span>(<span class="params">model, </span>):</span></span><br><span class="line">    batch_size = <span class="string">&quot;16&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The following code changes the first dimension of every input to be batch_size</span></span><br><span class="line">    <span class="comment"># Modify as appropriate ... note that this requires all inputs to</span></span><br><span class="line">    <span class="comment"># have the same batch_size</span></span><br><span class="line">    inputs = model.graph.<span class="built_in">input</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">input</span> <span class="keyword">in</span> inputs:</span><br><span class="line">        <span class="comment"># Checks omitted.This assumes that all inputs are tensors and have a shape with first dim.</span></span><br><span class="line">        <span class="comment"># Add checks as needed.</span></span><br><span class="line">        dim1 = <span class="built_in">input</span>.<span class="built_in">type</span>.tensor_type.shape.dim[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># update dim to be a symbolic value</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(batch_size, <span class="built_in">str</span>):</span><br><span class="line">            <span class="comment"># set dynamic batch size</span></span><br><span class="line">            dim1.dim_param = batch_size</span><br><span class="line">        <span class="keyword">elif</span> (<span class="built_in">isinstance</span>(batch_size, <span class="built_in">str</span>) <span class="keyword">and</span> batch_size.isdigit()) <span class="keyword">or</span> <span class="built_in">isinstance</span>(batch_size, <span class="built_in">int</span>):</span><br><span class="line">            <span class="comment"># set given batch size</span></span><br><span class="line">            dim1.dim_value = <span class="built_in">int</span>(batch_size)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># set batch size of 1</span></span><br><span class="line">            dim1.dim_value = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apply</span>(<span class="params">transform, infile, outfile</span>):</span></span><br><span class="line">    model = onnx.load(infile)</span><br><span class="line">    transform(model, )</span><br><span class="line">    onnx.save(model, outfile)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">apply(change_input_dim, <span class="string">&#x27;C:/mmdeploy/work_dir_onnx/end2end-sim.onnx&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;C:/mmdeploy/work_dir_onnx/end2end-sim-16input.onnx&#x27;</span>)</span><br></pre></td></tr></table></figure><p>以上代码中，batch_size等于数字时新onnx模型的batch_size变成相应的值，batch_size=”n”时新onnx模型的batch_size是动态的。</p><p>一个onnx模型的分类标签有可能全是中文，有时候我们需要将标签转换为英文，这时，我们可以通过简单的代码改写onnx模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># onnx模型更新缺陷类别</span></span><br><span class="line"><span class="keyword">import</span> onnx</span><br><span class="line"></span><br><span class="line">onnx_model = onnx.load(<span class="string">&#x27;D:/PycharmProjects/yolov5-7.0/runs/train-seg/exp/weights/best.onnx&#x27;</span>)</span><br><span class="line">category_list = [<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;12&#x27;</span>]</span><br><span class="line">old_model_names = onnx_model.metadata_props[-<span class="number">1</span>].value</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;old_model_names:&#x27;</span>, old_model_names)</span><br><span class="line">onnx_model.metadata_props[-<span class="number">1</span>].value = <span class="built_in">str</span>(category_list).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">onnx.save(onnx_model, <span class="string">&#x27;best-new.onnx&#x27;</span>)</span><br><span class="line">new_model = onnx.load(<span class="string">&#x27;best-new.onnx&#x27;</span>)</span><br><span class="line">new_model_names = onnx_model.metadata_props[-<span class="number">1</span>].value</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;new_model_names:&#x27;</span>, new_model_names)</span><br></pre></td></tr></table></figure><p>代码运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">old_model_names: &#123;<span class="number">0</span>: <span class="string">&#x27;person&#x27;</span>, <span class="number">1</span>: <span class="string">&#x27;bicycle&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;car&#x27;</span>, <span class="number">3</span>: <span class="string">&#x27;motorcycle&#x27;</span>, <span class="number">4</span>: <span class="string">&#x27;airplane&#x27;</span>, <span class="number">5</span>: <span class="string">&#x27;bus&#x27;</span>, <span class="number">6</span>: <span class="string">&#x27;train&#x27;</span>, <span class="number">7</span>: <span class="string">&#x27;truck&#x27;</span>, <span class="number">8</span>: <span class="string">&#x27;boat&#x27;</span>, <span class="number">9</span>: <span class="string">&#x27;traffic light&#x27;</span>, <span class="number">10</span>: <span class="string">&#x27;fire hydrant&#x27;</span>, <span class="number">11</span>: <span class="string">&#x27;stop sign&#x27;</span>, <span class="number">12</span>: <span class="string">&#x27;parking meter&#x27;</span>, <span class="number">13</span>: <span class="string">&#x27;bench&#x27;</span>, <span class="number">14</span>: <span class="string">&#x27;bird&#x27;</span>, <span class="number">15</span>: <span class="string">&#x27;cat&#x27;</span>, <span class="number">16</span>: <span class="string">&#x27;dog&#x27;</span>, <span class="number">17</span>: <span class="string">&#x27;horse&#x27;</span>, <span class="number">18</span>: <span class="string">&#x27;sheep&#x27;</span>, <span class="number">19</span>: <span class="string">&#x27;cow&#x27;</span>, <span class="number">20</span>: <span class="string">&#x27;elephant&#x27;</span>, <span class="number">21</span>: <span class="string">&#x27;bear&#x27;</span>, <span class="number">22</span>: <span class="string">&#x27;zebra&#x27;</span>, <span class="number">23</span>: <span class="string">&#x27;giraffe&#x27;</span>, <span class="number">24</span>: <span class="string">&#x27;backpack&#x27;</span>, <span class="number">25</span>: <span class="string">&#x27;umbrella&#x27;</span>, <span class="number">26</span>: <span class="string">&#x27;handbag&#x27;</span>, <span class="number">27</span>: <span class="string">&#x27;tie&#x27;</span>, <span class="number">28</span>: <span class="string">&#x27;suitcase&#x27;</span>, <span class="number">29</span>: <span class="string">&#x27;frisbee&#x27;</span>, <span class="number">30</span>: <span class="string">&#x27;skis&#x27;</span>, <span class="number">31</span>: <span class="string">&#x27;snowboard&#x27;</span>, <span class="number">32</span>: <span class="string">&#x27;sports ball&#x27;</span>, <span class="number">33</span>: <span class="string">&#x27;kite&#x27;</span>, <span class="number">34</span>: <span class="string">&#x27;baseball bat&#x27;</span>, <span class="number">35</span>: <span class="string">&#x27;baseball glove&#x27;</span>, <span class="number">36</span>: <span class="string">&#x27;skateboard&#x27;</span>, <span class="number">37</span>: <span class="string">&#x27;surfboard&#x27;</span>, <span class="number">38</span>: <span class="string">&#x27;tennis racket&#x27;</span>, <span class="number">39</span>: <span class="string">&#x27;bottle&#x27;</span>, <span class="number">40</span>: <span class="string">&#x27;wine glass&#x27;</span>, <span class="number">41</span>: <span class="string">&#x27;cup&#x27;</span>, <span class="number">42</span>: <span class="string">&#x27;fork&#x27;</span>, <span class="number">43</span>: <span class="string">&#x27;knife&#x27;</span>, <span class="number">44</span>: <span class="string">&#x27;spoon&#x27;</span>, <span class="number">45</span>: <span class="string">&#x27;bowl&#x27;</span>, <span class="number">46</span>: <span class="string">&#x27;banana&#x27;</span>, <span class="number">47</span>: <span class="string">&#x27;apple&#x27;</span>, <span class="number">48</span>: <span class="string">&#x27;sandwich&#x27;</span>, <span class="number">49</span>: <span class="string">&#x27;orange&#x27;</span>, <span class="number">50</span>: <span class="string">&#x27;broccoli&#x27;</span>, <span class="number">51</span>: <span class="string">&#x27;carrot&#x27;</span>, <span class="number">52</span>: <span class="string">&#x27;hot dog&#x27;</span>, <span class="number">53</span>: <span class="string">&#x27;pizza&#x27;</span>, <span class="number">54</span>: <span class="string">&#x27;donut&#x27;</span>, <span class="number">55</span>: <span class="string">&#x27;cake&#x27;</span>, <span class="number">56</span>: <span class="string">&#x27;chair&#x27;</span>, <span class="number">57</span>: <span class="string">&#x27;couch&#x27;</span>, <span class="number">58</span>: <span class="string">&#x27;potted plant&#x27;</span>, <span class="number">59</span>: <span class="string">&#x27;bed&#x27;</span>, <span class="number">60</span>: <span class="string">&#x27;dining table&#x27;</span>, <span class="number">61</span>: <span class="string">&#x27;toilet&#x27;</span>, <span class="number">62</span>: <span class="string">&#x27;tv&#x27;</span>, <span class="number">63</span>: <span class="string">&#x27;laptop&#x27;</span>, <span class="number">64</span>: <span class="string">&#x27;mouse&#x27;</span>, <span class="number">65</span>: <span class="string">&#x27;remote&#x27;</span>, <span class="number">66</span>: <span class="string">&#x27;keyboard&#x27;</span>, <span class="number">67</span>: <span class="string">&#x27;cell phone&#x27;</span>, <span class="number">68</span>: <span class="string">&#x27;microwave&#x27;</span>, <span class="number">69</span>: <span class="string">&#x27;oven&#x27;</span>, <span class="number">70</span>: <span class="string">&#x27;toaster&#x27;</span>, <span class="number">71</span>: <span class="string">&#x27;sink&#x27;</span>, <span class="number">72</span>: <span class="string">&#x27;refrigerator&#x27;</span>, <span class="number">73</span>: <span class="string">&#x27;book&#x27;</span>, <span class="number">74</span>: <span class="string">&#x27;clock&#x27;</span>, <span class="number">75</span>: <span class="string">&#x27;vase&#x27;</span>, <span class="number">76</span>: <span class="string">&#x27;scissors&#x27;</span>, <span class="number">77</span>: <span class="string">&#x27;teddy bear&#x27;</span>, <span class="number">78</span>: <span class="string">&#x27;hair drier&#x27;</span>, <span class="number">79</span>: <span class="string">&#x27;toothbrush&#x27;</span>&#125;</span><br><span class="line">new_model_names: [<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;12&#x27;</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> YOLO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用netron查看深度学习模型的网络结构</title>
      <link href="/2022/12/12/%E7%94%A8netron%E6%9F%A5%E7%9C%8B%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84/"/>
      <url>/2022/12/12/%E7%94%A8netron%E6%9F%A5%E7%9C%8B%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="netron是个好东西。"><a href="#netron是个好东西。" class="headerlink" title="netron是个好东西。"></a>netron是个好东西。</h2><p><img src="/images/netron.png"></p><h2 id="以上图onnx模型为例："><a href="#以上图onnx模型为例：" class="headerlink" title="以上图onnx模型为例："></a>以上图onnx模型为例：</h2><p>你能看到模型的stride、names、inputs、outputs，等于你知道了模型训练时的填充步幅、分类的类别名称、输入数据的格式、输出数据的格式，有助于初步了解模型、后期解析模型推理结果。</p><p>想要详细了解模型网络结构的，能看着netron结构图一步步研究。想做模型裁剪的，做完裁剪能用netron直观看到裁剪效果。更多用法，靠自己挖掘了……</p><p>关键是，用起来省事啊，随便打开一个浏览器，搜索netron或者输入网址<a href="https://netron.app/">https://netron.app/</a> 即可打开netron</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> YOLO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YOLOV5-7.0实例分割pth模型转onnx模型</title>
      <link href="/2022/12/11/YOLOV5-7.0%E5%AE%9E%E4%BE%8B%E5%88%86%E5%89%B2pth%E6%A8%A1%E5%9E%8B%E8%BD%AConnx%E6%A8%A1%E5%9E%8B/"/>
      <url>/2022/12/11/YOLOV5-7.0%E5%AE%9E%E4%BE%8B%E5%88%86%E5%89%B2pth%E6%A8%A1%E5%9E%8B%E8%BD%AConnx%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>pytorch模型要转换成onnx模型，基本流程主要是两步：第一，加载模型结构；第二，利用torch.onnx.export进行转换。yolov5训练好的实例分割模型，原始格式是pth，转换成onnx模型的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pt模型转onnx</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> onnx</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入yolov5所在的路径，模型转换需要yolov5工程定义的网络结构（即models、utils两个文件夹）</span></span><br><span class="line">sys.path.insert(<span class="number">0</span>, <span class="string">&#x27;D:/PycharmProjects/yolov5-7.0/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">model_path = <span class="string">&quot;D:/PycharmProjects/yolov5-7.0/runs/train-seg/exp/weights/best.pt&quot;</span></span><br><span class="line">onnx_path = <span class="string">&quot;D:/PycharmProjects/yolov5-7.0/runs/train-seg/exp/weights/best.onnx&quot;</span></span><br><span class="line">model = torch.load(model_path, map_location=<span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line">model = (model.get(<span class="string">&#x27;ema&#x27;</span>) <span class="keyword">or</span> model[<span class="string">&#x27;model&#x27;</span>]).<span class="built_in">float</span>()</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">hasattr</span>(model, <span class="string">&#x27;fuse&#x27;</span>):</span><br><span class="line">    model.fuse().<span class="built_in">eval</span>()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置export为true，裁剪不必要的输出</span></span><br><span class="line"><span class="keyword">for</span> k, m <span class="keyword">in</span> model.named_modules():</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">str</span>(<span class="built_in">type</span>(m)) == <span class="string">&quot;&lt;class &#x27;models.yolo.Segment&#x27;&gt;&quot;</span>:</span><br><span class="line">        m.export = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Input to the model</span></span><br><span class="line">x = torch.randn(<span class="number">1</span>, <span class="number">3</span>, <span class="number">640</span>, <span class="number">640</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># Export the model</span></span><br><span class="line">torch.onnx.export(model,  <span class="comment"># model being run</span></span><br><span class="line">                  x,  <span class="comment"># model input</span></span><br><span class="line">                  onnx_path,</span><br><span class="line">                  opset_version=<span class="number">12</span>,  <span class="comment"># the ONNX version to export the model to</span></span><br><span class="line">                  do_constant_folding=<span class="literal">True</span>,  <span class="comment"># 是否执行常量折叠优化</span></span><br><span class="line">                  input_names=[<span class="string">&#x27;input&#x27;</span>],  <span class="comment"># the model&#x27;s input names</span></span><br><span class="line">                  output_names=[<span class="string">&#x27;output0&#x27;</span>, <span class="string">&#x27;output1&#x27;</span>],  <span class="comment"># the model&#x27;s output names</span></span><br><span class="line">                  dynamic_axes=&#123;<span class="string">&#x27;input&#x27;</span>: &#123;<span class="number">0</span>: <span class="string">&#x27;batch&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;height&#x27;</span>, <span class="number">3</span>: <span class="string">&#x27;width&#x27;</span>&#125;,</span><br><span class="line">                                <span class="string">&#x27;output0&#x27;</span>: &#123;<span class="number">0</span>: <span class="string">&#x27;batch&#x27;</span>, <span class="number">1</span>: <span class="string">&#x27;anchors&#x27;</span>&#125;,</span><br><span class="line">                                <span class="string">&#x27;output1&#x27;</span>: &#123;<span class="number">0</span>: <span class="string">&#x27;batch&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;mask_height&#x27;</span>, <span class="number">3</span>: <span class="string">&#x27;mask_width&#x27;</span>&#125;&#125;</span><br><span class="line">                  )</span><br><span class="line"></span><br><span class="line"><span class="comment"># Checks</span></span><br><span class="line">model_onnx = onnx.load(onnx_path)  <span class="comment"># load onnx model</span></span><br><span class="line">onnx.checker.check_model(model_onnx)  <span class="comment"># check onnx model</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Metadata</span></span><br><span class="line">d = &#123;<span class="string">&#x27;stride&#x27;</span>: <span class="built_in">int</span>(<span class="built_in">max</span>(model.stride)), <span class="string">&#x27;names&#x27;</span>: model.names&#125;</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> d.items():</span><br><span class="line">    meta = model_onnx.metadata_props.add()</span><br><span class="line">    meta.key, meta.value = k, <span class="built_in">str</span>(v)</span><br><span class="line">onnx.save(model_onnx, onnx_path)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;process over !!!&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> YOLO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>井字棋小游戏</title>
      <link href="/2021/11/05/ticTacToe/"/>
      <url>/2021/11/05/ticTacToe/</url>
      
        <content type="html"><![CDATA[<p>本系列是学习《automate the boring stuff with python》这本书的学习笔记。</p><h2 id="一个小程序：井字棋"><a href="#一个小程序：井字棋" class="headerlink" title="一个小程序：井字棋"></a>一个小程序：井字棋</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">theBoard = &#123;</span><br><span class="line">    <span class="string">&#x27;top-L&#x27;</span>: <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;top-M&#x27;</span>: <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;top-R&#x27;</span>: <span class="string">&#x27; &#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;mid-L&#x27;</span>: <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;mid-M&#x27;</span>: <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;mid-R&#x27;</span>: <span class="string">&#x27; &#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;low-L&#x27;</span>: <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;low-M&#x27;</span>: <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;low-R&#x27;</span>: <span class="string">&#x27; &#x27;</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printBoard</span>(<span class="params">board</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(board[<span class="string">&#x27;top-L&#x27;</span>] + <span class="string">&#x27;|&#x27;</span> + board[<span class="string">&#x27;top-M&#x27;</span>] + <span class="string">&#x27;|&#x27;</span> + board[<span class="string">&#x27;top-R&#x27;</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-+-+-&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(board[<span class="string">&#x27;mid-L&#x27;</span>] + <span class="string">&#x27;|&#x27;</span> + board[<span class="string">&#x27;mid-M&#x27;</span>] + <span class="string">&#x27;|&#x27;</span> + board[<span class="string">&#x27;mid-R&#x27;</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-+-+-&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(board[<span class="string">&#x27;low-L&#x27;</span>] + <span class="string">&#x27;|&#x27;</span> + board[<span class="string">&#x27;low-M&#x27;</span>] + <span class="string">&#x27;|&#x27;</span> + board[<span class="string">&#x27;low-R&#x27;</span>])</span><br><span class="line">turn = <span class="string">&#x27;X&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    printBoard(theBoard)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Turn for &#x27;</span> + turn + <span class="string">&#x27;. Move on which space?&#x27;</span>) </span><br><span class="line">    move = <span class="built_in">input</span>()</span><br><span class="line">    theBoard[move] = turn </span><br><span class="line">    <span class="keyword">if</span> turn == <span class="string">&#x27;X&#x27;</span>:</span><br><span class="line">        turn = <span class="string">&#x27;O&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        turn = <span class="string">&#x27;X&#x27;</span></span><br><span class="line">printBoard(theBoard)</span><br></pre></td></tr></table></figure><h3 id="程序运行结果"><a href="#程序运行结果" class="headerlink" title="程序运行结果"></a>程序运行结果</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> | | </span><br><span class="line">-+-+- </span><br><span class="line"> | | </span><br><span class="line">-+-+- </span><br><span class="line"> | | </span><br><span class="line">Turn <span class="keyword">for</span> X. Move on which space?</span><br><span class="line">mid-M</span><br><span class="line"> | | </span><br><span class="line">-+-+- </span><br><span class="line"> |X| </span><br><span class="line">-+-+- </span><br><span class="line"> | | </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 简单编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>猜数字小游戏</title>
      <link href="/2021/11/05/guess-the-number/"/>
      <url>/2021/11/05/guess-the-number/</url>
      
        <content type="html"><![CDATA[<p>本系列是学习《automate the boring stuff with python》这本书的学习笔记。</p><h2 id="一个小程序：猜数字"><a href="#一个小程序：猜数字" class="headerlink" title="一个小程序：猜数字"></a>一个小程序：猜数字</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是一个猜数字的小游戏。</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">secretNumber = random.randint(<span class="number">1</span>, <span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;I am thinking of a number between 1 and 20.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 让玩游戏的人猜6次数字。 </span></span><br><span class="line"><span class="keyword">for</span> guessesTaken <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">7</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Take a guess.&#x27;</span>)</span><br><span class="line">    guess = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> guess &lt; secretNumber: </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Your guess is too low.&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> guess &gt; secretNumber: </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Your guess is too high.&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span> <span class="comment"># This condition is the correct guess!</span></span><br><span class="line"><span class="keyword">if</span> guess == secretNumber:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Good job! You guessed my number in &#x27;</span> + <span class="built_in">str</span>(guessesTaken) + <span class="string">&#x27; guesses!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Nope. The number I was thinking of was &#x27;</span> + <span class="built_in">str</span>(secretNumber))</span><br></pre></td></tr></table></figure><h3 id="程序运行结果"><a href="#程序运行结果" class="headerlink" title="程序运行结果"></a>程序运行结果</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">I am thinking of a number between <span class="number">1</span> <span class="keyword">and</span> <span class="number">20.</span> Take a guess.</span><br><span class="line"><span class="number">10</span></span><br><span class="line">Your guess <span class="keyword">is</span> too low.</span><br><span class="line">Take a guess.</span><br><span class="line"><span class="number">15</span></span><br><span class="line">Your guess <span class="keyword">is</span> too low. Take a guess.</span><br><span class="line"><span class="number">17</span></span><br><span class="line">Your guess <span class="keyword">is</span> too high. Take a guess.</span><br><span class="line"><span class="number">16</span></span><br><span class="line">Good job! You guessed my number <span class="keyword">in</span> <span class="number">4</span> guesses!</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 简单编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>my first blog</title>
      <link href="/2021/11/01/my-first-blog/"/>
      <url>/2021/11/01/my-first-blog/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
